<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <!-- Viewport settings to control layout on different devices -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
  <!-- Mapbox CSS for map styling -->
  <link href="https://api.mapbox.com/mapbox-gl-js/v3.1.2/mapbox-gl.css" rel="stylesheet">
  <!-- Mapbox JavaScript API for interactive maps -->
  <script src="https://api.mapbox.com/mapbox-gl-js/v3.1.2/mapbox-gl.js"></script>
  <!-- jQuery for DOM manipulation and event handling -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <!-- Google fonts for typography -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"/>
  <!-- Link to external CSS file for custom styles -->
  <link rel="stylesheet" href="style.css">
  <script>
    // Function to run when the window has finished loading
    window.onload = function() {
      query(osgb); // Calls the query function with an undefined 'osgb' variable, likely intended to be defined elsewhere or passed dynamically
    };

    // Function to fetch data from a specific URL and then display it using outputTable function
    function query(osgb) {
      let url = "https://maps2.bristol.gov.uk/server2/rest/services/ext/ll_transport/MapServer/5/query?where=&text=&objectIds=&time=&timeRelation=esriTimeRelationOverlaps&geometry=359002%2C+172474&geometryType=esriGeometryPoint&inSR=&spatialRel=esriSpatialRelIntersects&distance=1&units=esriSRUnit_Kilometer&relationParam=&outFields=*&returnGeometry=true&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=&havingClause=&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&historicMoment=&returnDistinctValues=false&resultOffset=&resultRecordCount=&returnExtentOnly=false&sqlFormat=none&datumTransformation=&parameterValues=&rangeValues=&quantizationParameters=&featureEncoding=esriDefault&f=pjson";
      fetch(url, { method: "GET", headers: { Accept: "application/json" } })
        .then(res => res.json())
        .then(json => outputTable(json, osgb));
    }

    // Function to dynamically create and populate a table with data fetched from the server
    function outputTable(json, osgb) {
      let element = document.getElementById("results");
      element.innerHTML = ""; // Clear existing table content
      let features = json.features;
      for (let i = 0; i < features.length; i++) {
        let a = features[i].attributes;
        let g = features[i].geometry;
        let tr = document.createElement("tr");
        // For each attribute of interest, create a table cell and append it to the row
        ['NAME', 'AREA_NAME', 'OPERATOR', 'OPERATING_TIMES', 'TYPE_DESCRIPTION', 'CCTV', 'EASTINGS', 'NORTHINGS', 'OCCUPANCY', 'OCCUPANCY_CURRENT'].forEach(field => {
          let td = document.createElement('td');
          td.innerHTML = a[field];
          tr.appendChild(td);
        });
        // Calculate distance if geometry and osgb are provided, and append as the last cell
        let td = document.createElement('td');
        if (g && osgb) {
          let d = Math.round(Math.sqrt((g.x - osgb.eastings) ** 2 + (g.y - osgb.northings) ** 2));
          td.innerHTML = `${d} metres`;
        } else {
          td.innerHTML = 'N/A'; // In case geometry or osgb is not available
        }
        tr.appendChild(td);
        element.appendChild(tr);
      }

      // Function to handle search requests
      function search(string) {
        let urlEncoded = encodeURIComponent(string);
        url = `https://maps2.bristol.gov.uk/server2/rest/services/ext/ll_transport/MapServer/5/query?where=1%3D1&text=${urlEncoded}&objectIds=&time=&timeRelation=esriTimeRelationOverlaps&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&distance=&units=esriSRUnit_Foot&relationParam=&outFields=*&returnGeometry=true&returnTrueCurves=false&maxAllowableOffset=&geometryPrecision=&outSR=&havingClause=&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&historicMoment=&returnDistinctValues=false&resultOffset=&resultRecordCount=&returnExtentOnly=false&sqlFormat=none&datumTransformation=&parameterValues=&rangeValues=&quantizationParameters=&featureEncoding=esriDefault&f=pjson`;
        fetch(url, { method: 'GET', headers: { 'Accept': 'application/json' }})
        .then (response => response.json())
        .then(outputTable);
      }
    }
  </script>

  <!-- Map Token -->
  <script> const MY_TOKEN = "pk.eyJ1Ijoienhpb25hIiwiYSI6ImNsdnVleHl5ODFnNTcybHJyYjJsZDU5NjkifQ.HeXvYeoC5E3Pik99lTgxYQ"; </script>

  <!-- Inline style for map container positioning and sizing -->
  <style>
      #map { position: relative; left: 100px; top: 1; height: 80%; width: 90%; }
  </style>

  <!-- Defer loading external script until HTML is parsed -->
  <script src="script.js" defer></script>

</head>
<body>
  <header>
    <div class="inner-width">
      <h1>Designated Car Park Finder</h1>
      <!-- Menu icon for mobile navigation toggle -->
      <div class="menu-icon">
        <i class="fas fa-align-right"></i>
      </div>
    </div>
  </header>

  <div class="navigation-menu">
    <!-- Navigation links for site pages -->
    <nav>
      <li><a href="DCP.htm">List by Distance</a></li>
      <li><a href="data usage.htm">Data Dashboard</a></li>
      <li><a href="mapcp.htm">Map</a></li>
      <li><a href="tablecp.htm">Car Park List</a></li>
      <li><a href="sign in.htm">Sign In</a></li>
    </nav>
  </div>

  <div class="header">
    <h2>Dashboard</h2>
  </div>

  <div class="wrapper">
    <!-- Table for displaying car park data -->
    <table  id="dataTable">
      <caption>
        <div class="inner-width2">

          <h2>List of Car Parks</h2>

          <!-- Search bar for filtering car parks -->
          <div class="searchbar">
            <div class="filter-icon">
              <i class="fa fa-search" style="font-size:18px"></i>
            </div>
            <form class="search" action="tablecp.htm">
              <div class="term">
                <input name="searchterm" placeholder="search..." type="text">
                <button type="submit"><i class="fa fa-search"></i></button>
              </div>
            </form>
          </div>
        </div>
      </caption>
      <thead>
        <!-- Column headers for car park data -->
        <th>Name</th>
        <th>Area Name</th>
        <th>Operator</th>
        <th>Times</th>
        <th>Type</th>
        <th>CCTV</th>
        <th>Eastings</th>
        <th>Northings</th>
        <th>Occupancy</th>
        <th>Occupancy Current</th>
        <th>Distance</th>
      </thead>
      <tbody id="results">
        <!-- Filled dynamically with car park data -->
      </tbody>
    </table>
  </div>

  <div class="header">
    <h2>Car Park Map</h2>
  </div>

    <div class="inner-width3">
      <div class="center-icon">
        <div class="location">
          <!-- Button to get current location using geolocation API -->
          <button onclick="getLocation('data usage.htm')">
            <i class="fa fa-location-arrow"></i>
          </button>
        </div>
      </div>
    </div>

  <div id="map">
    <!-- Container for Mapbox map -->
  </div>

  <!-- Additional scripts for handling interactions -->

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

  <script>
    // get query string with searchterm
    var urlParams = new URLSearchParams(location.search);
    var searchterm = urlParams.get('searchterm');
    search(searchterm);
  </script>

  <script>
    // Toggles navigation menu visibility on mobile
    $(".menu-icon").click(function() {
      $(this).toggleClass("active");
      $(".navigation-menu").toggleClass("active");
      $(".menu-icon i").toggleClass("fa-times");
    });
  </script>

  <script>

    // Function to fetch and use the user's location or default if declined/not available
    function getLocation(page) {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          function(position) {
            // permission granted
            location.href = `${page}?lat=${position.coords.latitude}&lon=${position.coords.longitude}`;
          },
          function() {
            // permission denied
            // location defaults to central Bristol
            location.href = `${page}?lat=51.454514&lon=-2.587910`;
          }
        );
      } else {
        // unsupported feature
        alert("Geolocation is not supported by this browser.");
        // location defaults to central Bristol
        location.href = `${page}?lat=51.454514&lon=-2.587910`;
      }
    }

    // get query string parameters lat, lon
    var urlParams = new URLSearchParams(location.search);
    var lat = urlParams.get('lat');
    var lon = urlParams.get('lon');

    mapboxgl.accessToken = MY_TOKEN;
      var map = new mapboxgl.Map({
        container: 'map', // container ID
        center: [lon,lat], // longitude, latitude
        zoom: 12 // zoom level
      });

    // Create marker and add it to the map.
    var marker = new mapboxgl.Marker().setLngLat([lon, lat]).addTo(map);

    query();

    function addMarkers(json) {
      let features = json.features;
      for (i = 0; i < features.length; i++) {
        let a = features[i].attributes;
        let g = features[i].geometry;

        // Create marker and add it to the map.
        let marker = new mapboxgl.Marker().setLngLat([g.x, g.y]).addTo(map);

        // create the popup
        let popup = new mapboxgl.Popup({ offset: 25 }).setText(a.NAME);
            marker.setPopup(popup);
      }
    }
  </script>


  <script>
    // Toggles search bar visibility
    $(".filter-icon").click(function() {
      $(this).toggleClass("active");
      $(".term").toggleClass("active");
      $(".filter-icon i").toggleClass("fa-times");
    });
  </script>

</body>
</html>
